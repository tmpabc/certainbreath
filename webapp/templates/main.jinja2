<!-- Taken from https://bl.ocks.org/pjsier/fbf9317b31f070fd540c5523fef167ac and modified -->
<!DOCTYPE html>
<html>
  <head>
    <title>Realtime Data Line Graph</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <meta charset='utf-8' />
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <style>
    body {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    }
    #chart_pressure {
        max-width: 600px;
        max-height: 400px;
    }
    #chart_temperature {
        max-width: 600px;
        max-height: 400px;
        position: relative;
    }
    </style>
  </head>
  <body>
    <div id="chart_pressure"></div>
    <div id="chart_temperature"></div>
    <script src="js/chart.js"></script>
    <script>
    var pressureArr = [];
    var temperatureArr = [];
    var MAX_LENGTH = 100;
    var duration = 500;
    var pressureChart = realTimeLineChart();
    var temperatureChart = realTimeLineChart();
    pressureChart.duration(duration);
    temperatureChart.duration(duration);

    var socket = new WebSocket("{{wsURL}}");
    socket.onmessage = function(event) {

      var msg = JSON.parse(event.data);

      msg.forEach(x => x.time = new Date(x.time));

      pressureArr.push(...msg.filter(d => d.type.includes("Pressure")));
      temperatureArr.push(...msg.filter(d => d.type.includes("Temperature")));

      if (pressureArr.length > MAX_LENGTH) {
        pressureArr = pressureArr.slice(pressureArr.length - MAX_LENGTH);
      }
      if (temperatureArr.length > MAX_LENGTH) {
        temperatureArr = temperatureArr.slice(temperatureArr.length - MAX_LENGTH);
      }

      d3.select("#chart_pressure").datum(pressureArr).call(pressureChart);
      d3.select("#chart_temperature").datum(temperatureArr).call(temperatureChart);
      };


    function seedData() {
      var now = new Date();
      for (var i = 0; i < MAX_LENGTH/2; ++i) {
        temperatureArr.push({
          time: new Date(now.getTime() - ((MAX_LENGTH/2 - i) * duration)),
          value: i + 1,
          type: "1"
        });
        pressureArr.push({
          time: new Date(now.getTime() - ((MAX_LENGTH - i) * duration)),
          value: i + 2,
          type: "2"
        });
        temperatureArr.push({
          time: new Date(now.getTime() - ((MAX_LENGTH/2 - i) * duration)),
          value: i + 1,
          type: "3"
        });
        pressureArr.push({
          time: new Date(now.getTime() - ((MAX_LENGTH - i) * duration)),
          value: i + 2,
          type: "4"
        });
      }
    }



    function resize() {
      if (d3.select("#chart_pressure svg").empty() || d3.select("#chart_temperature svg").empty()) {
        return;
      }
      pressureChart.width(+d3.select("#chart_pressure").style("width").replace(/(px)/g, ""));
      temperatureChart.width(+d3.select("#chart_temperature").style("width").replace(/(px)/g, ""));

      d3.select("#chart_pressure").call(pressureChart);
      d3.select("#chart_temperature").call(temperatureChart);
    }

    document.addEventListener("DOMContentLoaded", function() {
      seedData();
      //window.setInterval(updateData, 500);
      d3.select("#chart_pressure").datum(pressureArr).call(pressureChart);
      d3.select("#chart_temperature").datum(temperatureArr).call(temperatureChart);
      d3.select(window).on('resize', resize);
    });
    </script>
</body>
</html>
